// // import { Color } from "three";
// // import { IfcViewerAPI } from "web-ifc-viewer";

// // const container = document.getElementById("viewer-container");
// // const viewer = new IfcViewerAPI({
// //   container,
// //   backgroundColor: new Color(0xffffff),
// // });
// // viewer.axes.setAxes();
// // viewer.grid.setGrid();

// // // const input = document.getElementById("file-input");

// // // exporter.api.SetWasmPath('../utils/');

// // window.ondblclick = () => viewer.IFC.selector.pickIfcItem(true);
// // window.onmousemove = () => viewer.IFC.selector.prePickIfcItem();
// // viewer.clipper.active = true;

// // window.onkeydown = (event) => {
// //   if (event.code === "KeyP") {
// //     viewer.clipper.createPlane();
// //   } else if (event.code === "KeyO") {
// //     viewer.clipper.deletePlane();
// //   }
// // };

// // async function loadIfc(url) {
// //     const model = await viewer.IFC.loadIfcUrl(url);
// //     viewer.shadowDropper.renderShadow(model.modelID);
// //   }
  
// //   // load model from the below path in your repository
// //   loadIfc("../IFC/01.ifc");

// // import { ThreeScene } from '../utils/scene';
// // import { IFCExporter } from 'web-ifc-exporter';
// // import { BoxGeometry, MeshLambertMaterial, Vector3, Mesh } from 'three';
// // import { IfcFurnishingElement, IFCFURNISHINGELEMENT } from 'web-ifc';

// // const threeScene = new ThreeScene();
// // async function exportModels() {
// //    const exporter = new IFCExporter();

// //    const boxGeom = new BoxGeometry();
// //    const redMaterial = new MeshLambertMaterial({color: 'red'});
// //    const box = new Mesh(boxGeom, redMaterial);

// //    exporter.api.SetWasmPath('../utils/');

// //    await exporter.createModelForExport(new Vector3(), new Vector3(), [
// //       {
// //          geometries: [box.geometry],
// //          geometryMaterials: [box.material],
// //          placement: new Vector3(),
// //          ifcElementId: IFCFURNISHINGELEMENT,
// //          ifcElementType: IfcFurnishingElement
// //       }
// //    ])
// // }

// // exportModels();

// // import { Color } from "three";
// // import { IfcViewerAPI } from "web-ifc-viewer";

// // const container = document.getElementById("viewer-container");
// // const viewer = new IfcViewerAPI({
// //   container,
// //   backgroundColor: new Color(0xffffff),
// // });
// // viewer.IFC.setWasmPath('files/');

// // viewer.axes.setAxes();
// // viewer.grid.setGrid();

// // const input = document.getElementById("file-input");

// // window.ondblclick = () => viewer.IFC.selector.pickIfcItem(true);
// // window.onmousemove = () => viewer.IFC.selector.prePickIfcItem();
// // viewer.clipper.active = true;

// // window.onkeydown = (event) => {
// //   if (event.code === "KeyP") {
// //     viewer.clipper.createPlane();
// //   } else if (event.code === "KeyO") {
// //     viewer.clipper.deletePlane();
// //   }
// // };

// // input.addEventListener(
// //     "change",
  
// //     async (changed) => {
// //         const file = changed.target.files[0];
// //         console.log(file);
// //         const ifcURL = URL.createObjectURL(file);
// //         console.log(ifcURL);
// //         viewer.IFC.loadIfcUrl(ifcURL);
// //     },
// //     false
// // );

// // async function loadIfc(url) {
// //     const model = await viewer.IFC.loadIfcUrl(url);
// //     viewer.shadowDropper.renderShadow(model.modelID);
// // }

// // // load model from the below path in your repository
// // loadIfc("IFC/01.ifc");

// // import { IFCLoader } from "web-ifc-three/IFCLoader";

// // const ifcLoader = new IFCLoader();
// // ifcLoader.load("02.ifc", (ifcModel) => scene.add(ifcModel));
// // const modelID = ifcModel.modelID;

// // ifcLoader.setWasmPath (
// //     await ifcLoader.ifcManager.setWasmPath("dist/wasmDir/")
// // )


// // import {IfcAPI,IFCSPACE} from "web-ifc/web-ifc-api";
// // const ifcFileLocation = "../IFC/02.ifc"; // dont forget to modify for your ifc filename
// // // let modelID = 0;
// // const ifcapi = new IfcAPI();
// // //ifcapi.SetWasmPath("./wasm/"); only if the wasm file are note at the same level as app.js

// // /**
// //  * resolve a Uint8Array().
// //  * 
// //  * @param string url location of your ifc file
// //  * @returns {Promise}
// //  */
// //  function getIfcFile(url) {
// //   return new Promise((resolve, reject) => {
// //         var oReq = new XMLHttpRequest();
// //         oReq.responseType = "arraybuffer";
// //         oReq.addEventListener("load", () => {
// //             resolve(new Uint8Array(oReq.response));
// //         });
// //         oReq.open("GET", url);
// //         oReq.send();
// //   });
// // }

// // /**
// // * Get all IFCSPACE from ifc file
// // * @param integer modelID 
// // * @returns array
// // */
// // function getAllSpaces(modelID) {
// //     // Get all the propertyset lines in the IFC file
// //     let lines = ifcapi.GetLineIDsWithType(modelID, IFCSPACE);
// //     let lineSize = lines.size();
// //     let spaces = [];
// //     for (let i = 0; i < lineSize; i++) {
// //         // Getting the ElementID from Lines
// //         let relatedID = lines.get(i);
// //         // Getting Element Data using the relatedID
// //         let relDefProps = ifcapi.GetLine(modelID, relatedID);
// //         spaces.push(relDefProps);
// //     }
// //     return spaces;
// // }


// // ifcapi.Init().then(() => {
// //     getIfcFile(ifcFileLocation).then( (ifcData) => {
// //         modelID = ifcapi.OpenModel(ifcData);
// //         console.log(modelID);
// //         let test = ifcapi.LoadAllGeometry(modelID);
// //         console.log(test);
// //         let isModelOpened = ifcapi.IsModelOpen(modelID);
// //         console.log({isModelOpened});
// //         let spaces = getAllSpaces(modelID);
// //         console.log({spaces});
// //         ifcapi.CloseModel(modelID);
// //     });
// // });

// import {
//     AmbientLight,
//     AxesHelper,
//     DirectionalLight,
//     GridHelper,
//     PerspectiveCamera,
//     Scene,
//     WebGLRenderer,
// } from "three";
// import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
// import { IFCLoader } from "web-ifc-three/IFCLoader";

// //Creates the Three.js scene
// const scene = new Scene();

// //Object to store the size of the viewport
// const size = {
// width: window.innerWidth,
// height: window.innerHeight,
// };

// console.log(size);
// console.log(size.width);

// //Creates the camera (point of view of the user)
// const camera = new PerspectiveCamera(45);
// camera.position.z = 15;
// camera.position.y = 13;
// camera.position.x = 8;
// console.log(camera);

// //Creates the lights of the scene
// const lightColor = 0xffffff;

// const ambientLight = new AmbientLight(lightColor, 3);
// scene.add(ambientLight);

// const directionalLight = new DirectionalLight(lightColor, 1);
// directionalLight.position.set(0, 10, 0);
// directionalLight.target.position.set(5, 0, 0);
// scene.add(directionalLight);
// scene.add(directionalLight.target);

// //Sets up the renderer, fetching the canvas of the HTML
// const threeCanvas = document.getElementById("three-canvas");
// const renderer = new WebGLRenderer({ canvas: threeCanvas, alpha: true });
// renderer.setSize(size.width, size.height);
// renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

// //Creates grids and axes in the scene
// const grid = new GridHelper(10, 10);
// scene.add(grid);

// const axes = new AxesHelper();
// axes.material.depthTest = false;
// axes.renderOrder = 1;
// scene.add(axes);
  
// //Creates the orbit controls (to navigate the scene)
// const controls = new OrbitControls(camera, threeCanvas);
// controls.enableDamping = true;
// controls.target.set(2, 0, 0);

// //Animation loop
// const animate = () => {
//     controls.update();
//     renderer.render(scene, camera);
//     requestAnimationFrame(animate);
// };
  
// animate();
  
// //Adjust the viewport to the size of the browser
// window.addEventListener("resize", () => {
//     (size.width = window.innerWidth), (size.height = window.innerHeight);
//     camera.aspect = size.width / size.height;
//     camera.updateProjectionMatrix();
//     renderer.setSize(size.width, size.height);
// });

// //Sets up the IFC loading
// const ifcLoader = new IFCLoader();
// // console.log(viewer);
// // viewer.context.getIfcCamera().cameraControls.dollyToCursor = false;
// ifcLoader.load("../IFC/02.ifc", (ifcModel) => scene.add(ifcModel));
  
// const input = document.getElementById("file-input");
// input.addEventListener(
//     "change",
//     (changed) => {
//         const ifcURL = URL.createObjectURL(changed.target.files[0]);
//         ifcLoader.load(ifcURL, (ifcModel) => scene.add(ifcModel));
//     },
//     false
// );